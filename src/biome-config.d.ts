/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Used to identify the kind of code action emitted by a rule
 */
export type FixKind = "none" | "safe" | "unsafe";
export type RuleSourceKind = "sameLogic" | "inspired";
export type RuleSource =
  | {
      clippy: string;
    }
  | {
      eslint: string;
    }
  | {
      eslintGraphql: string;
    }
  | {
      eslintGraphqlSchemaLinter: string;
    }
  | {
      eslintImport: string;
    }
  | {
      eslintImportAccess: string;
    }
  | {
      eslintJest: string;
    }
  | {
      eslintJsxA11y: string;
    }
  | {
      eslintReact: string;
    }
  | {
      eslintReactHooks: string;
    }
  | {
      eslintReactRefresh: string;
    }
  | {
      eslintSolid: string;
    }
  | {
      eslintSonarJs: string;
    }
  | {
      eslintStylistic: string;
    }
  | {
      eslintTypeScript: string;
    }
  | {
      eslintUnicorn: string;
    }
  | {
      eslintUnusedImports: string;
    }
  | {
      eslintMysticatea: string;
    }
  | {
      eslintBarrelFiles: string;
    }
  | {
      eslintN: string;
    }
  | {
      eslintNext: string;
    }
  | {
      stylelint: string;
    }
  | {
      eslintNoSecrets: string;
    }
  | {
      denoLint: string;
    };

export interface RulesMetadata {
  assist?: Rules;
  lints?: Rules;
  syntax?: Rules;
  [k: string]: unknown;
}
export interface Rules {
  languages?: {
    [k: string]: {
      [k: string]: {
        [k: string]: JsonMetadata;
      };
    };
  };
  numberOrRules?: number;
  [k: string]: unknown;
}
export interface JsonMetadata {
  /**
   * It marks if a rule is deprecated, and if so a reason has to be provided.
   */
  deprecated?: boolean;
  docs?: string;
  /**
   * The kind of fix
   */
  fixKind?: FixKind & string;
  /**
   * The rule's documentation URL
   */
  link?: string;
  /**
   * The name of this rule, displayed in the diagnostics it emits
   */
  name?: string;
  /**
   * Whether a rule is recommended or not
   */
  recommended?: boolean;
  /**
   * The source kind of the rule
   */
  sourceKind?: RuleSourceKind | null;
  /**
   * The source metadata of the rule
   */
  sources?: RuleSource[];
  /**
   * The version when the rule was implemented
   */
  version?: string;
  [k: string]: unknown;
}
